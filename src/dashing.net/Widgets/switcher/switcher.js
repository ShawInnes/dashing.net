// Generated by CoffeeScript 1.7.1
(function() {
  var DashboardSwitcher, WidgetSwitcher;

  DashboardSwitcher = (function() {
    function DashboardSwitcher() {
      var name, names;
      this.dashboardNames = [];
      names = $('[data-switcher-dashboards]').first().attr('data-switcher-dashboards') || '';
      if (names.length > 1) {
        this.dashboardNames = (function() {
          var _i, _len, _ref, _results;
          _ref = names.sub(' ', ',').split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            _results.push(name.trim());
          }
          return _results;
        })();
      }
    }

    DashboardSwitcher.prototype.start = function(interval) {
      var pathParts, self;
      if (interval == null) {
        interval = 60000;
      }
      self = this;
      this.maxPos = this.dashboardNames.length - 1;
      if (this.dashboardNames.length === 0) {
        return;
      }
      pathParts = window.location.pathname.split('/');
      this.curName = pathParts[pathParts.length - 1];
      this.curPos = this.dashboardNames.indexOf(this.curName);
      if (this.curPos === -1) {
        this.curPos = 0;
        this.curName = this.dashboardNames[this.curPos];
      }
      return this.handle = setTimeout(function() {
        self.curPos += 1;
        if (self.curPos > self.maxPos) {
          self.curPos = 0;
        }
        self.curName = self.dashboardNames[self.curPos];
        return window.location.pathname = "/" + self.curName;
      }, parseInt(interval, 10));
    };

    return DashboardSwitcher;

  })();

  WidgetSwitcher = (function() {
    function WidgetSwitcher(elements) {
      this.elements = elements;
      this.$elements = $(elements);
    }

    WidgetSwitcher.prototype.start = function(interval) {
      var self;
      if (interval == null) {
        interval = 5000;
      }
      self = this;
      this.maxPos = this.$elements.length - 1;
      this.curPos = 0;
      self.$elements.slice(1).hide();
      return this.handle = setInterval(function() {
        self.$elements.hide();
        $(self.$elements[self.curPos]).show().css('display', 'table-cell');
        self.curPos += 1;
        if (self.curPos > self.maxPos) {
          return self.curPos = 0;
        }
      }, parseInt(interval, 10));
    };

    WidgetSwitcher.prototype.stop = function() {
      return clearInterval(this.handle);
    };

    return WidgetSwitcher;

  })();

  Dashing.on('ready', function() {
    var $container, ditcher;
    $('.gridster li').each(function(index, listItem) {
      var $listItem, $widgets, switcher;
      $listItem = $(listItem);
      $widgets = $listItem.children('div');
      if ($widgets.length > 1) {
        switcher = new WidgetSwitcher($widgets);
        return switcher.start($listItem.attr('data-switcher-interval') || 5000);
      }
    });
    $container = $('#container');
    ditcher = new DashboardSwitcher();
    return ditcher.start($container.attr('data-switcher-interval') || 60000);
  });

}).call(this);

//# sourceMappingURL=switcher.map
